{"ast":null,"code":"'use strict';\n\nvar _objectWithoutProperties = require('babel-runtime/helpers/object-without-properties')['default'];\n\nvar _extends = require('babel-runtime/helpers/extends')['default'];\n\nvar _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];\n\nexports.__esModule = true;\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _styleMaps = require('./styleMaps');\n\nvar _utilsBootstrapUtils = require('./utils/bootstrapUtils');\n\nvar _Collapse = require('./Collapse');\n\nvar _Collapse2 = _interopRequireDefault(_Collapse);\n\nvar Panel = _react2['default'].createClass({\n  displayName: 'Panel',\n  propTypes: {\n    collapsible: _react2['default'].PropTypes.bool,\n    onSelect: _react2['default'].PropTypes.func,\n    header: _react2['default'].PropTypes.node,\n    id: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.string, _react2['default'].PropTypes.number]),\n    footer: _react2['default'].PropTypes.node,\n    defaultExpanded: _react2['default'].PropTypes.bool,\n    expanded: _react2['default'].PropTypes.bool,\n    eventKey: _react2['default'].PropTypes.any,\n    headerRole: _react2['default'].PropTypes.string,\n    panelRole: _react2['default'].PropTypes.string,\n    onEnter: _Collapse2['default'].propTypes.onEnter,\n    onEntering: _Collapse2['default'].propTypes.onEntering,\n    onEntered: _Collapse2['default'].propTypes.onEntered,\n    onExit: _Collapse2['default'].propTypes.onExit,\n    onExiting: _Collapse2['default'].propTypes.onExiting,\n    onExited: _Collapse2['default'].propTypes.onExited\n  },\n  getDefaultProps: function getDefaultProps() {\n    return {\n      defaultExpanded: false\n    };\n  },\n  getInitialState: function getInitialState() {\n    return {\n      expanded: this.props.defaultExpanded\n    };\n  },\n  handleSelect: function handleSelect(e) {\n    e.persist();\n    e.selected = true;\n\n    if (this.props.onSelect) {\n      this.props.onSelect(this.props.eventKey, e);\n    } else {\n      e.preventDefault();\n    }\n\n    if (e.selected) {\n      this.handleToggle();\n    }\n  },\n  handleToggle: function handleToggle() {\n    this.setState({\n      expanded: !this.state.expanded\n    });\n  },\n  isExpanded: function isExpanded() {\n    return this.props.expanded != null ? this.props.expanded : this.state.expanded;\n  },\n  render: function render() {\n    var _props = this.props;\n    var headerRole = _props.headerRole;\n    var panelRole = _props.panelRole;\n\n    var props = _objectWithoutProperties(_props, ['headerRole', 'panelRole']);\n\n    return _react2['default'].createElement('div', _extends({}, props, {\n      className: _classnames2['default'](this.props.className, _utilsBootstrapUtils.getClassSet(this.props)),\n      id: this.props.collapsible ? null : this.props.id,\n      onSelect: null\n    }), this.renderHeading(headerRole), this.props.collapsible ? this.renderCollapsibleBody(panelRole) : this.renderBody(), this.renderFooter());\n  },\n  renderCollapsibleBody: function renderCollapsibleBody(panelRole) {\n    var collapseProps = {\n      onEnter: this.props.onEnter,\n      onEntering: this.props.onEntering,\n      onEntered: this.props.onEntered,\n      onExit: this.props.onExit,\n      onExiting: this.props.onExiting,\n      onExited: this.props.onExited,\n      'in': this.isExpanded()\n    };\n    var props = {\n      className: _utilsBootstrapUtils.prefix(this.props, 'collapse'),\n      id: this.props.id,\n      ref: 'panel',\n      'aria-hidden': !this.isExpanded()\n    };\n\n    if (panelRole) {\n      props.role = panelRole;\n    }\n\n    return _react2['default'].createElement(_Collapse2['default'], collapseProps, _react2['default'].createElement('div', props, this.renderBody()));\n  },\n  renderBody: function renderBody() {\n    var _this = this;\n\n    var allChildren = this.props.children;\n    var bodyElements = [];\n    var panelBodyChildren = [];\n\n    var bodyClass = _utilsBootstrapUtils.prefix(this.props, 'body');\n\n    function getProps() {\n      return {\n        key: bodyElements.length\n      };\n    }\n\n    function addPanelChild(child) {\n      bodyElements.push(_react.cloneElement(child, getProps()));\n    }\n\n    function addPanelBody(children) {\n      bodyElements.push(_react2['default'].createElement('div', _extends({\n        className: bodyClass\n      }, getProps()), children));\n    }\n\n    function maybeRenderPanelBody() {\n      if (panelBodyChildren.length === 0) {\n        return;\n      }\n\n      addPanelBody(panelBodyChildren);\n      panelBodyChildren = [];\n    } // Handle edge cases where we should not iterate through children.\n\n\n    if (!Array.isArray(allChildren) || allChildren.length === 0) {\n      if (this.shouldRenderFill(allChildren)) {\n        addPanelChild(allChildren);\n      } else {\n        addPanelBody(allChildren);\n      }\n    } else {\n      allChildren.forEach(function (child) {\n        if (_this.shouldRenderFill(child)) {\n          maybeRenderPanelBody(); // Separately add the filled element.\n\n          addPanelChild(child);\n        } else {\n          panelBodyChildren.push(child);\n        }\n      });\n      maybeRenderPanelBody();\n    }\n\n    return bodyElements;\n  },\n  shouldRenderFill: function shouldRenderFill(child) {\n    return _react2['default'].isValidElement(child) && child.props.fill != null;\n  },\n  renderHeading: function renderHeading(headerRole) {\n    var header = this.props.header;\n\n    if (!header) {\n      return null;\n    }\n\n    if (!_react2['default'].isValidElement(header) || Array.isArray(header)) {\n      header = this.props.collapsible ? this.renderCollapsibleTitle(header, headerRole) : header;\n    } else {\n      var className = _classnames2['default'](_utilsBootstrapUtils.prefix(this.props, 'title'), header.props.className);\n\n      if (this.props.collapsible) {\n        header = _react.cloneElement(header, {\n          className: className,\n          children: this.renderAnchor(header.props.children, headerRole)\n        });\n      } else {\n        header = _react.cloneElement(header, {\n          className: className\n        });\n      }\n    }\n\n    return _react2['default'].createElement('div', {\n      className: _utilsBootstrapUtils.prefix(this.props, 'heading')\n    }, header);\n  },\n  renderAnchor: function renderAnchor(header, headerRole) {\n    return _react2['default'].createElement('a', {\n      href: '#' + (this.props.id || ''),\n      'aria-controls': this.props.collapsible ? this.props.id : null,\n      className: this.isExpanded() ? null : 'collapsed',\n      'aria-expanded': this.isExpanded(),\n      'aria-selected': this.isExpanded(),\n      onClick: this.handleSelect,\n      role: headerRole\n    }, header);\n  },\n  renderCollapsibleTitle: function renderCollapsibleTitle(header, headerRole) {\n    return _react2['default'].createElement('h4', {\n      className: _utilsBootstrapUtils.prefix(this.props, 'title'),\n      role: 'presentation'\n    }, this.renderAnchor(header, headerRole));\n  },\n  renderFooter: function renderFooter() {\n    if (!this.props.footer) {\n      return null;\n    }\n\n    return _react2['default'].createElement('div', {\n      className: _utilsBootstrapUtils.prefix(this.props, 'footer')\n    }, this.props.footer);\n  }\n});\n\nvar PANEL_STATES = _styleMaps.State.values().concat(_styleMaps.DEFAULT, _styleMaps.PRIMARY);\n\nexports['default'] = _utilsBootstrapUtils.bsStyles(PANEL_STATES, _styleMaps.DEFAULT, _utilsBootstrapUtils.bsClass('panel', Panel));\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}