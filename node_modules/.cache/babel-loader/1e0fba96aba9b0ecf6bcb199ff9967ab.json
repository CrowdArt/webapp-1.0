{"ast":null,"code":"'use strict';\n\nvar _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];\n\nexports.__esModule = true;\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _invariant = require('invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactPropTypesLibElementType = require('react-prop-types/lib/elementType');\n\nvar _reactPropTypesLibElementType2 = _interopRequireDefault(_reactPropTypesLibElementType);\n\nvar _utilsBootstrapUtils = require('./utils/bootstrapUtils');\n\nvar animationPropType = _react.PropTypes.oneOfType([_react.PropTypes.bool, _reactPropTypesLibElementType2['default']]);\n\nvar TabContent = _react2['default'].createClass({\n  displayName: 'TabContent',\n  propTypes: {\n    /**\n     * the Component used to render the TabContent\n     */\n    componentClass: _reactPropTypesLibElementType2['default'],\n\n    /**\n     * Sets a default animation strategy for all children TabPanes.\n     * Use `false` to disable, `true` to enable the default \"Fade\"\n     * animation or any `<Transition>` component.\n     */\n    animation: _react.PropTypes.oneOfType([_react.PropTypes.bool, _reactPropTypesLibElementType2['default']]),\n\n    /**\n     * Unmount the tab (remove it from the DOM) when it is no longer visible\n     */\n    unmountOnExit: _react.PropTypes.bool\n  },\n  contextTypes: {\n    $bs_tabcontainer: _react2['default'].PropTypes.shape({\n      activeKey: _react2['default'].PropTypes.any,\n      onSelect: _react.PropTypes.func\n    })\n  },\n  childContextTypes: {\n    $bs_tabcontent: _react.PropTypes.shape({\n      bsClass: _react.PropTypes.string,\n      animation: animationPropType,\n      activeKey: _react.PropTypes.any,\n      onExited: _react.PropTypes.func,\n      register: _react.PropTypes.func,\n      unmountOnExit: _react.PropTypes.bool\n    })\n  },\n  getDefaultProps: function getDefaultProps() {\n    return {\n      componentClass: 'div',\n      animation: true,\n      unmountOnExit: false\n    };\n  },\n  getInitialState: function getInitialState() {\n    return {\n      exitingPane: null\n    };\n  },\n  getChildContext: function getChildContext() {\n    var exitingPane = this._exitingPane;\n    return {\n      $bs_tabcontent: {\n        bsClass: this.props.bsClass,\n        animation: this.props.animation,\n        activeKey: exitingPane ? undefined : this.getActiveKey(),\n        onExited: this.handlePaneExited,\n        register: this.registerPane,\n        unmountOnExit: this.props.unmountOnExit\n      }\n    };\n  },\n  componentWillMount: function componentWillMount() {\n    this.panes = [];\n  },\n\n  /**\n   * This belongs in `componentWillReceiveProps()` but\n   * 0.14.x contains a bug where cwrp isn't called when only context changes.\n   * fixed in master, not sure it will make it into any 0.14 release\n   */\n  componentWillUpdate: function componentWillUpdate(nextProps, _, nextContext) {\n    var currentActiveKey = this.getActiveKey();\n    var nextActiveKey = this.getActiveKey(nextContext);\n    var currentKeyIsStillValid = this.panes.indexOf(currentActiveKey) !== -1;\n\n    if (this.panes.indexOf(this._exitingPane) === -1) {\n      this._exitingPane = null;\n    }\n\n    if (nextActiveKey !== currentActiveKey && currentKeyIsStillValid) {\n      this._exitingPane = currentActiveKey;\n    }\n  },\n  render: function render() {\n    var _props = this.props;\n    var className = _props.className;\n    var children = _props.children;\n    var Component = this.props.componentClass;\n\n    var contentClass = _utilsBootstrapUtils.prefix(this.props, 'content');\n\n    return _react2['default'].createElement(Component, {\n      className: _classnames2['default'](contentClass, className)\n    }, children);\n  },\n  handlePaneExited: function handlePaneExited() {\n    this._exitingPane = null;\n    this.forceUpdate();\n  },\n\n  /**\n   * This is unfortunately neccessary because the TabContent needs to know if\n   * a TabPane is ever going to exit, since it may unmount and just leave the\n   * TabContent to wait longingly forever for the handlePaneExited to be called.\n   */\n  registerPane: function registerPane(eventKey) {\n    var _this = this;\n\n    var panes = this.panes;\n    !(panes.indexOf(eventKey) === -1) ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'You cannot have multiple TabPanes of with the same `eventKey` in the same ' + 'TabContent component. Duplicate eventKey: ' + eventKey) : _invariant2['default'](false) : undefined;\n    panes.push(eventKey);\n    return function () {\n      panes.splice(panes.indexOf(eventKey), 1); // #1892\n      // new active state can propagate down _before_\n      // the tab actually unmounts, so it will map be exiting.\n      // since an exiting tab won't complete, clear the bad state\n\n      if (eventKey === _this._exitingPane) {\n        _this.handlePaneExited();\n      } // If the tab was active, we need to tell the container\n      // that it no longer exists and as such is not active.\n\n\n      if (eventKey === _this.getActiveKey()) {\n        _this.getContext('$bs_tabcontainer').onSelect();\n      }\n    };\n  },\n  getActiveKey: function getActiveKey() {\n    var context = arguments.length <= 0 || arguments[0] === undefined ? this.context : arguments[0];\n    return this.getContext('$bs_tabcontainer', context).activeKey;\n  },\n  getContext: function getContext(key) {\n    var context = arguments.length <= 1 || arguments[1] === undefined ? this.context : arguments[1];\n    return context[key] || {};\n  }\n});\n\nexports['default'] = _utilsBootstrapUtils.bsClass('tab', TabContent);\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}