{"ast":null,"code":"'use strict';\n\nvar _inherits = require('babel-runtime/helpers/inherits')['default'];\n\nvar _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];\n\nvar _extends = require('babel-runtime/helpers/extends')['default'];\n\nvar _objectWithoutProperties = require('babel-runtime/helpers/object-without-properties')['default'];\n\nvar _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];\n\nexports.__esModule = true;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactPropTypesLibElementType = require('react-prop-types/lib/elementType');\n\nvar _reactPropTypesLibElementType2 = _interopRequireDefault(_reactPropTypesLibElementType);\n\nfunction isTrivialHref(href) {\n  return !href || href.trim() === '#';\n}\n/**\n * There are situations due to browser quirks or bootstrap css where\n * an anchor tag is needed, when semantically a button tag is the\n * better choice. SafeAnchor ensures that when an anchor is used like a\n * button its accessible. It also emulates input `disabled` behavior for\n * links, which is usually desirable for Buttons, NavItems, MenuItems, etc.\n */\n\n\nvar SafeAnchor = function (_React$Component) {\n  _inherits(SafeAnchor, _React$Component);\n\n  function SafeAnchor(props) {\n    _classCallCheck(this, SafeAnchor);\n\n    _React$Component.call(this, props);\n\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  SafeAnchor.prototype.render = function render() {\n    var _props = this.props;\n    var href = _props.href;\n    var role = _props.role;\n    var tabIndex = _props.tabIndex;\n    var disabled = _props.disabled;\n    var style = _props.style;\n\n    var props = _objectWithoutProperties(_props, ['href', 'role', 'tabIndex', 'disabled', 'style']);\n\n    var Component = this.props.componentClass || 'a';\n\n    if (isTrivialHref(href)) {\n      role = role || 'button'; // we want to make sure there is a href attribute on the node\n      // otherwise, the cursor incorrectly styled (except with role='button')\n\n      href = href || '';\n    }\n\n    if (disabled) {\n      tabIndex = -1;\n      style = _extends({\n        pointerEvents: 'none'\n      }, style);\n    }\n\n    return _react2['default'].createElement(Component, _extends({}, props, {\n      role: role,\n      href: href,\n      style: style,\n      tabIndex: tabIndex,\n      onClick: this.handleClick\n    }));\n  };\n\n  SafeAnchor.prototype.handleClick = function handleClick(event) {\n    var _props2 = this.props;\n    var disabled = _props2.disabled;\n    var href = _props2.href;\n    var onClick = _props2.onClick;\n\n    if (disabled || isTrivialHref(href)) {\n      event.preventDefault();\n    }\n\n    if (disabled) {\n      event.stopPropagation();\n      return;\n    }\n\n    if (onClick) {\n      onClick(event);\n    }\n  };\n\n  return SafeAnchor;\n}(_react2['default'].Component);\n\nexports['default'] = SafeAnchor;\nSafeAnchor.propTypes = {\n  href: _react2['default'].PropTypes.string,\n  onClick: _react2['default'].PropTypes.func,\n  disabled: _react2['default'].PropTypes.bool,\n  role: _react2['default'].PropTypes.string,\n  tabIndex: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.number, _react2['default'].PropTypes.string]),\n\n  /**\n   * this is sort of silly but needed for Button\n   */\n  componentClass: _reactPropTypesLibElementType2['default']\n};\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}