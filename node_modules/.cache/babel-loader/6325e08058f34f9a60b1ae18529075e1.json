{"ast":null,"code":"/* eslint react/no-multi-comp: 0 */\n'use strict';\n\nvar _objectWithoutProperties = require('babel-runtime/helpers/object-without-properties')['default'];\n\nvar _extends = require('babel-runtime/helpers/extends')['default'];\n\nvar _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];\n\nexports.__esModule = true;\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactPropTypesLibElementType = require('react-prop-types/lib/elementType');\n\nvar _reactPropTypesLibElementType2 = _interopRequireDefault(_reactPropTypesLibElementType);\n\nvar _uncontrollable = require('uncontrollable');\n\nvar _uncontrollable2 = _interopRequireDefault(_uncontrollable);\n\nvar _styleMaps = require('./styleMaps');\n\nvar _utilsBootstrapUtils = require('./utils/bootstrapUtils');\n\nvar _Grid = require('./Grid');\n\nvar _Grid2 = _interopRequireDefault(_Grid);\n\nvar _NavbarBrand = require('./NavbarBrand');\n\nvar _NavbarBrand2 = _interopRequireDefault(_NavbarBrand);\n\nvar _NavbarCollapse = require('./NavbarCollapse');\n\nvar _NavbarCollapse2 = _interopRequireDefault(_NavbarCollapse);\n\nvar _NavbarHeader = require('./NavbarHeader');\n\nvar _NavbarHeader2 = _interopRequireDefault(_NavbarHeader);\n\nvar _NavbarToggle = require('./NavbarToggle');\n\nvar _NavbarToggle2 = _interopRequireDefault(_NavbarToggle);\n\nvar Navbar = _react2['default'].createClass({\n  displayName: 'Navbar',\n  propTypes: {\n    /**\n     * Create a fixed navbar along the top of the screen, that scrolls with the page\n     */\n    fixedTop: _react2['default'].PropTypes.bool,\n\n    /**\n     * Create a fixed navbar along the bottom of the screen, that scrolls with the page\n     */\n    fixedBottom: _react2['default'].PropTypes.bool,\n\n    /**\n     * Create a full-width navbar that scrolls away with the page\n     */\n    staticTop: _react2['default'].PropTypes.bool,\n\n    /**\n     * An alternative dark visual style for the Navbar\n     */\n    inverse: _react2['default'].PropTypes.bool,\n\n    /**\n     * Allow the Navbar to fluidly adjust to the page or container width, instead of at the\n     * predefined screen breakpoints\n     */\n    fluid: _react2['default'].PropTypes.bool,\n\n    /**\n     * Set a custom element for this component.\n     */\n    componentClass: _reactPropTypesLibElementType2['default'],\n\n    /**\n     * A callback fired when the `<Navbar>` body collapses or expands.\n     * Fired when a `<Navbar.Toggle>` is clicked and called with the new `navExpanded` boolean value.\n     *\n     * @controllable navExpanded\n     */\n    onToggle: _react2['default'].PropTypes.func,\n\n    /**\n     * Explicitly set the visiblity of the navbar body\n     *\n     * @controllable onToggle\n     */\n    expanded: _react2['default'].PropTypes.bool\n  },\n  childContextTypes: {\n    $bs_navbar: _react.PropTypes.bool,\n    $bs_navbar_bsClass: _react.PropTypes.string,\n    $bs_navbar_onToggle: _react.PropTypes.func,\n    $bs_navbar_expanded: _react.PropTypes.bool\n  },\n  getDefaultProps: function getDefaultProps() {\n    return {\n      componentClass: 'nav',\n      fixedTop: false,\n      fixedBottom: false,\n      staticTop: false,\n      inverse: false,\n      fluid: false\n    };\n  },\n  getChildContext: function getChildContext() {\n    return {\n      $bs_navbar: true,\n      $bs_navbar_bsClass: this.props.bsClass,\n      $bs_navbar_onToggle: this.handleToggle,\n      $bs_navbar_expanded: this.props.expanded\n    };\n  },\n  handleToggle: function handleToggle() {\n    this.props.onToggle(!this.props.expanded);\n  },\n  isNavExpanded: function isNavExpanded() {\n    return !!this.props.expanded;\n  },\n  render: function render() {\n    var _props = this.props;\n    var fixedTop = _props.fixedTop;\n    var fixedBottom = _props.fixedBottom;\n    var staticTop = _props.staticTop;\n    var inverse = _props.inverse;\n    var ComponentClass = _props.componentClass;\n    var fluid = _props.fluid;\n    var className = _props.className;\n    var children = _props.children;\n\n    var props = _objectWithoutProperties(_props, ['fixedTop', 'fixedBottom', 'staticTop', 'inverse', 'componentClass', 'fluid', 'className', 'children']); // will result in some false positives but that seems better\n    // than false negatives. strict `undefined` check allows explicit\n    // \"nulling\" of the role if the user really doesn't want one\n\n\n    if (props.role === undefined && ComponentClass !== 'nav') {\n      props.role = 'navigation';\n    }\n\n    if (inverse) {\n      props.bsStyle = _styleMaps.INVERSE;\n    }\n\n    var classes = _utilsBootstrapUtils.getClassSet(props);\n\n    classes[_utilsBootstrapUtils.prefix(this.props, 'fixed-top')] = fixedTop;\n    classes[_utilsBootstrapUtils.prefix(this.props, 'fixed-bottom')] = fixedBottom;\n    classes[_utilsBootstrapUtils.prefix(this.props, 'static-top')] = staticTop;\n    return _react2['default'].createElement(ComponentClass, _extends({}, props, {\n      className: _classnames2['default'](className, classes)\n    }), _react2['default'].createElement(_Grid2['default'], {\n      fluid: fluid\n    }, children));\n  }\n});\n\nvar NAVBAR_STATES = [_styleMaps.DEFAULT, _styleMaps.INVERSE];\nNavbar = _utilsBootstrapUtils.bsStyles(NAVBAR_STATES, _styleMaps.DEFAULT, _utilsBootstrapUtils.bsClass('navbar', _uncontrollable2['default'](Navbar, {\n  expanded: 'onToggle'\n})));\n\nfunction createSimpleWrapper(tag, suffix, displayName) {\n  var wrapper = function wrapper(_ref, _ref2) {\n    var Tag = _ref.componentClass;\n    var className = _ref.className;\n\n    var props = _objectWithoutProperties(_ref, ['componentClass', 'className']);\n\n    var _classNames;\n\n    var _ref2$$bs_navbar_bsClass = _ref2.$bs_navbar_bsClass;\n    var bsClass = _ref2$$bs_navbar_bsClass === undefined ? 'navbar' : _ref2$$bs_navbar_bsClass;\n    return _react2['default'].createElement(Tag, _extends({}, props, {\n      className: _classnames2['default'](className, _utilsBootstrapUtils.prefix({\n        bsClass: bsClass\n      }, suffix), (_classNames = {}, _classNames[_utilsBootstrapUtils.prefix({\n        bsClass: bsClass\n      }, 'right')] = props.pullRight, _classNames[_utilsBootstrapUtils.prefix({\n        bsClass: bsClass\n      }, 'left')] = props.pullLeft, _classNames))\n    }));\n  };\n\n  wrapper.displayName = displayName;\n  wrapper.propTypes = {\n    componentClass: _reactPropTypesLibElementType2['default'],\n    pullRight: _react2['default'].PropTypes.bool,\n    pullLeft: _react2['default'].PropTypes.bool\n  };\n  wrapper.defaultProps = {\n    componentClass: tag,\n    pullRight: false,\n    pullLeft: false\n  };\n  wrapper.contextTypes = {\n    $bs_navbar_bsClass: _react.PropTypes.string\n  };\n  return wrapper;\n}\n\nNavbar.Brand = _NavbarBrand2['default'];\nNavbar.Header = _NavbarHeader2['default'];\nNavbar.Toggle = _NavbarToggle2['default'];\nNavbar.Collapse = _NavbarCollapse2['default'];\nNavbar.Form = createSimpleWrapper('div', 'form', 'NavbarForm');\nNavbar.Text = createSimpleWrapper('p', 'text', 'NavbarText');\nNavbar.Link = createSimpleWrapper('a', 'link', 'NavbarLink');\nexports['default'] = Navbar;\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}