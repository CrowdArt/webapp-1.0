{"ast":null,"code":"'use strict';\n\nvar _inherits = require('babel-runtime/helpers/inherits')['default'];\n\nvar _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];\n\nvar _extends = require('babel-runtime/helpers/extends')['default'];\n\nvar _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];\n\nexports.__esModule = true;\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _FormGroup = require('./FormGroup');\n\nvar _FormGroup2 = _interopRequireDefault(_FormGroup);\n\nvar _Glyphicon = require('./Glyphicon');\n\nvar _Glyphicon2 = _interopRequireDefault(_Glyphicon);\n\nvar InputBase = function (_React$Component) {\n  _inherits(InputBase, _React$Component);\n\n  function InputBase() {\n    _classCallCheck(this, InputBase);\n\n    _React$Component.apply(this, arguments);\n  }\n\n  InputBase.prototype.getInputDOMNode = function getInputDOMNode() {\n    return this.refs.input;\n  };\n\n  InputBase.prototype.getValue = function getValue() {\n    if (this.props.type === 'static') {\n      return this.props.value;\n    } else if (this.props.type) {\n      if (this.props.type === 'select' && this.props.multiple) {\n        return this.getSelectedOptions();\n      }\n\n      return this.getInputDOMNode().value;\n    }\n\n    throw new Error('Cannot use getValue without specifying input type.');\n  };\n\n  InputBase.prototype.getChecked = function getChecked() {\n    return this.getInputDOMNode().checked;\n  };\n\n  InputBase.prototype.getSelectedOptions = function getSelectedOptions() {\n    var values = [];\n    Array.prototype.forEach.call(this.getInputDOMNode().getElementsByTagName('option'), function (option) {\n      if (option.selected) {\n        var value = option.getAttribute('value') || option.innerHtml;\n        values.push(value);\n      }\n    });\n    return values;\n  };\n\n  InputBase.prototype.isCheckboxOrRadio = function isCheckboxOrRadio() {\n    return this.props.type === 'checkbox' || this.props.type === 'radio';\n  };\n\n  InputBase.prototype.isFile = function isFile() {\n    return this.props.type === 'file';\n  };\n\n  InputBase.prototype.renderInputGroup = function renderInputGroup(children) {\n    var addonBefore = this.props.addonBefore ? _react2['default'].createElement('span', {\n      className: 'input-group-addon',\n      key: 'addonBefore'\n    }, this.props.addonBefore) : null;\n    var addonAfter = this.props.addonAfter ? _react2['default'].createElement('span', {\n      className: 'input-group-addon',\n      key: 'addonAfter'\n    }, this.props.addonAfter) : null;\n    var buttonBefore = this.props.buttonBefore ? _react2['default'].createElement('span', {\n      className: 'input-group-btn'\n    }, this.props.buttonBefore) : null;\n    var buttonAfter = this.props.buttonAfter ? _react2['default'].createElement('span', {\n      className: 'input-group-btn'\n    }, this.props.buttonAfter) : null;\n    var inputGroupClassName = undefined;\n\n    switch (this.props.bsSize) {\n      case 'small':\n        inputGroupClassName = 'input-group-sm';\n        break;\n\n      case 'large':\n        inputGroupClassName = 'input-group-lg';\n        break;\n\n      default:\n    }\n\n    return addonBefore || addonAfter || buttonBefore || buttonAfter ? _react2['default'].createElement('div', {\n      className: _classnames2['default'](inputGroupClassName, 'input-group'),\n      key: 'input-group'\n    }, addonBefore, buttonBefore, children, addonAfter, buttonAfter) : children;\n  };\n\n  InputBase.prototype.renderIcon = function renderIcon() {\n    if (this.props.hasFeedback) {\n      if (this.props.feedbackIcon) {\n        return _react2['default'].cloneElement(this.props.feedbackIcon, {\n          formControlFeedback: true\n        });\n      }\n\n      switch (this.props.bsStyle) {\n        case 'success':\n          return _react2['default'].createElement(_Glyphicon2['default'], {\n            formControlFeedback: true,\n            glyph: 'ok',\n            key: 'icon'\n          });\n\n        case 'warning':\n          return _react2['default'].createElement(_Glyphicon2['default'], {\n            formControlFeedback: true,\n            glyph: 'warning-sign',\n            key: 'icon'\n          });\n\n        case 'error':\n          return _react2['default'].createElement(_Glyphicon2['default'], {\n            formControlFeedback: true,\n            glyph: 'remove',\n            key: 'icon'\n          });\n\n        default:\n          return _react2['default'].createElement('span', {\n            className: 'form-control-feedback',\n            key: 'icon'\n          });\n      }\n    } else {\n      return null;\n    }\n  };\n\n  InputBase.prototype.renderHelp = function renderHelp() {\n    return this.props.help ? _react2['default'].createElement('span', {\n      className: 'help-block',\n      key: 'help'\n    }, this.props.help) : null;\n  };\n\n  InputBase.prototype.renderCheckboxAndRadioWrapper = function renderCheckboxAndRadioWrapper(children) {\n    var classes = {\n      'checkbox': this.props.type === 'checkbox',\n      'radio': this.props.type === 'radio'\n    };\n    return _react2['default'].createElement('div', {\n      className: _classnames2['default'](classes),\n      key: 'checkboxRadioWrapper'\n    }, children);\n  };\n\n  InputBase.prototype.renderWrapper = function renderWrapper(children) {\n    return this.props.wrapperClassName ? _react2['default'].createElement('div', {\n      className: this.props.wrapperClassName,\n      key: 'wrapper'\n    }, children) : children;\n  };\n\n  InputBase.prototype.renderLabel = function renderLabel(children) {\n    var classes = {\n      'control-label': !this.isCheckboxOrRadio()\n    };\n    classes[this.props.labelClassName] = this.props.labelClassName;\n    return this.props.label ? _react2['default'].createElement('label', {\n      htmlFor: this.props.id,\n      className: _classnames2['default'](classes),\n      key: 'label'\n    }, children, this.props.label) : children;\n  };\n\n  InputBase.prototype.renderInput = function renderInput() {\n    if (!this.props.type) {\n      return this.props.children;\n    }\n\n    switch (this.props.type) {\n      case 'select':\n        return _react2['default'].createElement('select', _extends({}, this.props, {\n          className: _classnames2['default'](this.props.className, 'form-control'),\n          ref: 'input',\n          key: 'input'\n        }), this.props.children);\n\n      case 'textarea':\n        return _react2['default'].createElement('textarea', _extends({}, this.props, {\n          className: _classnames2['default'](this.props.className, 'form-control'),\n          ref: 'input',\n          key: 'input'\n        }));\n\n      case 'static':\n        return _react2['default'].createElement('p', _extends({}, this.props, {\n          className: _classnames2['default'](this.props.className, 'form-control-static'),\n          ref: 'input',\n          key: 'input'\n        }), this.props.value);\n\n      default:\n        var className = this.isCheckboxOrRadio() || this.isFile() ? '' : 'form-control';\n        return _react2['default'].createElement('input', _extends({}, this.props, {\n          className: _classnames2['default'](this.props.className, className),\n          ref: 'input',\n          key: 'input'\n        }));\n    }\n  };\n\n  InputBase.prototype.renderFormGroup = function renderFormGroup(children) {\n    return _react2['default'].createElement(_FormGroup2['default'], this.props, children);\n  };\n\n  InputBase.prototype.renderChildren = function renderChildren() {\n    return !this.isCheckboxOrRadio() ? [this.renderLabel(), this.renderWrapper([this.renderInputGroup(this.renderInput()), this.renderIcon(), this.renderHelp()])] : this.renderWrapper([this.renderCheckboxAndRadioWrapper(this.renderLabel(this.renderInput())), this.renderHelp()]);\n  };\n\n  InputBase.prototype.render = function render() {\n    var children = this.renderChildren();\n    return this.renderFormGroup(children);\n  };\n\n  return InputBase;\n}(_react2['default'].Component);\n\nInputBase.propTypes = {\n  type: _react2['default'].PropTypes.string,\n  label: _react2['default'].PropTypes.node,\n  help: _react2['default'].PropTypes.node,\n  addonBefore: _react2['default'].PropTypes.node,\n  addonAfter: _react2['default'].PropTypes.node,\n  buttonBefore: _react2['default'].PropTypes.node,\n  buttonAfter: _react2['default'].PropTypes.node,\n  bsSize: _react2['default'].PropTypes.oneOf(['small', 'medium', 'large']),\n  bsStyle: _react2['default'].PropTypes.oneOf(['success', 'warning', 'error']),\n  hasFeedback: _react2['default'].PropTypes.bool,\n  feedbackIcon: _react2['default'].PropTypes.node,\n  id: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.string, _react2['default'].PropTypes.number]),\n  groupClassName: _react2['default'].PropTypes.string,\n  wrapperClassName: _react2['default'].PropTypes.string,\n  labelClassName: _react2['default'].PropTypes.string,\n  multiple: _react2['default'].PropTypes.bool,\n  disabled: _react2['default'].PropTypes.bool,\n  value: _react2['default'].PropTypes.any\n};\nInputBase.defaultProps = {\n  disabled: false,\n  hasFeedback: false,\n  multiple: false\n};\nexports['default'] = InputBase;\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}