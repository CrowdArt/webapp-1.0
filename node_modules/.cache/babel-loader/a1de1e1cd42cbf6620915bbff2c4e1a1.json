{"ast":null,"code":"'use strict';\n\nvar _inherits = require('babel-runtime/helpers/inherits')['default'];\n\nvar _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];\n\nvar _extends = require('babel-runtime/helpers/extends')['default'];\n\nvar _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];\n\nexports.__esModule = true;\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _keycode = require('keycode');\n\nvar _keycode2 = _interopRequireDefault(_keycode);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactDom = require('react-dom');\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _reactPropTypesLibAll = require('react-prop-types/lib/all');\n\nvar _reactPropTypesLibAll2 = _interopRequireDefault(_reactPropTypesLibAll);\n\nvar _warning = require('warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nvar _utilsBootstrapUtils = require('./utils/bootstrapUtils');\n\nvar _utilsCreateChainedFunction = require('./utils/createChainedFunction');\n\nvar _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);\n\nvar _utilsTabUtils = require('./utils/tabUtils');\n\nvar _utilsValidComponentChildren = require('./utils/ValidComponentChildren');\n\nvar _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);\n\nvar Nav = function (_React$Component) {\n  _inherits(Nav, _React$Component);\n\n  function Nav() {\n    _classCallCheck(this, Nav);\n\n    _React$Component.apply(this, arguments);\n  }\n\n  Nav.prototype.componentDidUpdate = function componentDidUpdate() {\n    if (this._needsRefocus) {\n      var ul = this.refs.ul && _reactDom2['default'].findDOMNode(this.refs.ul);\n\n      var tabs = ul ? ul.children || [] : [];\n      var tabIdx = this.eventKeys().indexOf(this.getActiveKey());\n      this._needsRefocus = false;\n\n      if (tabIdx !== -1) {\n        var tabNode = tabs[tabIdx];\n\n        if (tabNode && tabNode.firstChild) {\n          tabNode.firstChild.focus();\n        }\n      }\n    }\n  };\n\n  Nav.prototype.render = function render() {\n    var className = this.props.className;\n    var isNavbar = this.props.navbar != null ? this.props.navbar : this.context.$bs_navbar;\n\n    var classes = _utilsBootstrapUtils.getClassSet(this.props);\n\n    classes[_utilsBootstrapUtils.prefix(this.props, 'stacked')] = this.props.stacked;\n    classes[_utilsBootstrapUtils.prefix(this.props, 'justified')] = this.props.justified;\n\n    if (isNavbar) {\n      var bsClass = this.context.$bs_navbar_bsClass || 'navbar';\n      classes[_utilsBootstrapUtils.prefix({\n        bsClass: bsClass\n      }, 'nav')] = true;\n      classes[_utilsBootstrapUtils.prefix({\n        bsClass: bsClass\n      }, 'right')] = this.props.pullRight;\n      classes[_utilsBootstrapUtils.prefix({\n        bsClass: bsClass\n      }, 'left')] = this.props.pullLeft;\n    } else {\n      classes['pull-right'] = this.props.pullRight;\n      classes['pull-left'] = this.props.pullLeft;\n    }\n\n    var list = _react2['default'].createElement('ul', _extends({\n      ref: 'ul'\n    }, this.props, {\n      role: this.getNavRole(),\n      className: _classnames2['default'](className, classes)\n    }), _utilsValidComponentChildren2['default'].map(this.props.children, this.renderNavItem, this));\n\n    return list;\n  };\n\n  Nav.prototype.renderNavItem = function renderNavItem(child, index) {\n    var onSelect = _utilsCreateChainedFunction2['default'](child.props.onSelect, this.props.onSelect);\n\n    var active = this.isChildActive(child);\n    var tabProps = this.getTabProps(child, active, onSelect);\n    return _react.cloneElement(child, _extends({\n      active: active,\n      activeKey: this.props.activeKey,\n      activeHref: this.props.activeHref,\n      onSelect: onSelect,\n      key: child.key || index,\n      navItem: true\n    }, tabProps));\n  };\n\n  Nav.prototype.getActiveKey = function getActiveKey() {\n    var context = this.context.$bs_tabcontainer;\n\n    if (!context) {\n      return this.props.activeKey;\n    }\n\n    process.env.NODE_ENV !== 'production' ? _warning2['default'](!(this.props.activeKey != null || this.props.activeHref), 'Specifing a Nav `activeKey` or `activeHref` prop in the context of a `TabContainer` is not supported. ' + 'Instead use `<TabContainer activeKey={' + this.props.activeKey + '} />`') : undefined;\n    return context.activeKey;\n  };\n\n  Nav.prototype.isChildActive = function isChildActive(child) {\n    var activeKey = this.getActiveKey();\n\n    if (this.context.$bs_tabcontainer) {\n      process.env.NODE_ENV !== 'production' ? _warning2['default'](!child.props.active, 'Specifying a NavItem `active` prop in the context of a `TabContainer` is not supported. Instead ' + 'use `<TabContainer activeKey={' + child.props.eventKey + '} />`') : undefined;\n      return child.props.eventKey === activeKey;\n    }\n\n    if (child.props.active) {\n      return true;\n    }\n\n    if (this.props.activeKey != null) {\n      if (child.props.eventKey === this.props.activeKey) {\n        return true;\n      }\n    }\n\n    if (this.props.activeHref != null) {\n      if (child.props.href === this.props.activeHref) {\n        return true;\n      }\n    }\n\n    return child.props.active;\n  };\n\n  Nav.prototype.getTabProps = function getTabProps(child, isActive, onSelect) {\n    var navRole = this.getNavRole();\n    var context = this.context.$bs_tabcontainer;\n\n    if (!context && navRole !== 'tablist') {\n      // No tab props here.\n      return null;\n    }\n\n    var _child$props = child.props;\n    var id = _child$props.id;\n    var controls = _child$props['aria-controls'];\n    var eventKey = _child$props.eventKey;\n    var role = _child$props.role;\n    var onKeyDown = _child$props.onKeyDown;\n    var _child$props$tabIndex = _child$props.tabIndex;\n    var tabIndex = _child$props$tabIndex === undefined ? 0 : _child$props$tabIndex;\n\n    if (context && context.getId) {\n      process.env.NODE_ENV !== 'production' ? _warning2['default'](!(id || controls), 'In the context of a TabContainer, NavItems are given generated `id` and `aria-controls` ' + 'attributes for the sake of proper component accessibility. Any provided ones will be ignored. ' + 'To control these attributes directly provide a `generateChildId` prop to the parent TabContainer.') : undefined;\n      id = context.getId(eventKey, _utilsTabUtils.TAB) || null;\n      controls = context.getId(eventKey, _utilsTabUtils.PANE) || null;\n      onSelect = _utilsCreateChainedFunction2['default'](onSelect, context.onSelect);\n    }\n\n    if (navRole === 'tablist') {\n      role = role || 'tab';\n      onKeyDown = _utilsCreateChainedFunction2['default'](this.handleTabKeyDown.bind(this, onSelect || function () {}), onKeyDown);\n      tabIndex = isActive ? tabIndex : -1;\n    }\n\n    return {\n      onSelect: onSelect,\n      id: id,\n      role: role,\n      onKeyDown: onKeyDown,\n      'aria-controls': controls,\n      tabIndex: tabIndex\n    };\n  };\n\n  Nav.prototype.handleTabKeyDown = function handleTabKeyDown(onSelect, event) {\n    var keys = this.eventKeys();\n    var currentKey = this.getActiveKey() || keys[0];\n    var next = undefined;\n\n    switch (event.keyCode) {\n      case _keycode2['default'].codes.left:\n      case _keycode2['default'].codes.up:\n        next = _utilsTabUtils.nextEnabled(this.props.children, currentKey, keys, false);\n\n        if (next && next !== currentKey) {\n          event.preventDefault();\n          onSelect(next);\n          this._needsRefocus = true;\n        }\n\n        break;\n\n      case _keycode2['default'].codes.right:\n      case _keycode2['default'].codes.down:\n        next = _utilsTabUtils.nextEnabled(this.props.children, currentKey, keys, true);\n\n        if (next && next !== currentKey) {\n          event.preventDefault();\n          onSelect(next);\n          this._needsRefocus = true;\n        }\n\n        break;\n\n      default:\n    }\n  };\n\n  Nav.prototype.eventKeys = function eventKeys() {\n    var keys = [];\n\n    _utilsValidComponentChildren2['default'].forEach(this.props.children, function (_ref) {\n      var eventKey = _ref.props.eventKey;\n      return keys.push(eventKey);\n    });\n\n    return keys;\n  };\n\n  Nav.prototype.getNavRole = function getNavRole() {\n    return this.props.role || (this.context.$bs_tabcontainer ? 'tablist' : null);\n  };\n\n  return Nav;\n}(_react2['default'].Component);\n\nNav.propTypes = {\n  /**\n   * Marks the child NavItem with a matching `href` prop as active.\n   */\n  activeHref: _react2['default'].PropTypes.string,\n\n  /**\n   * Marks the NavItem with a matching `eventKey` as active. Has a\n   * higher precedence over `activeHref`.\n   */\n  activeKey: _react2['default'].PropTypes.any,\n\n  /**\n   * NavItems are be positioned vertically.\n   */\n  stacked: _react2['default'].PropTypes.bool,\n  justified: _reactPropTypesLibAll2['default'](_react2['default'].PropTypes.bool, function (_ref2) {\n    var justified = _ref2.justified;\n    var navbar = _ref2.navbar;\n    return justified && navbar ? Error('justified navbar `Nav`s are not supported') : null;\n  }),\n\n  /**\n   * A callback fired when a NavItem is selected.\n   *\n   * ```js\n   * function (\n   * \tAny eventKey,\n   * \tSyntheticEvent event?\n   * )\n   * ```\n   */\n  onSelect: _react2['default'].PropTypes.func,\n\n  /**\n   * CSS classes for the wrapper `nav` element\n   */\n  className: _react2['default'].PropTypes.string,\n\n  /**\n   * HTML id for the wrapper `nav` element\n   */\n  id: _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.string, _react2['default'].PropTypes.number]),\n\n  /**\n   * ARIA role for the Nav, in the context of a TabContainer, the default will be set\n   * to \"tablist\", but can be overridden by the Nav when set explicitly.\n   *\n   * When the role is set to \"tablist\" NavItem focus is managed according to the\n   * ARIA authoring practices for tabs: https://www.w3.org/TR/2013/WD-wai-aria-practices-20130307/#tabpanel\n   */\n  role: _react2['default'].PropTypes.string,\n\n  /**\n   * Apply styling an alignment for use in a Navbar. This prop will be set\n   * automatically when the Nav is used inside a Navbar.\n   */\n  navbar: _react2['default'].PropTypes.bool,\n\n  /**\n   * Float the Nav to the right. When `navbar` is `true` the appropriate\n   * contextual classes are added as well.\n   */\n  pullRight: _react2['default'].PropTypes.bool,\n\n  /**\n   * Float the Nav to the left. When `navbar` is `true` the appropriate\n   * contextual classes are added as well.\n   */\n  pullLeft: _react2['default'].PropTypes.bool\n};\nNav.contextTypes = {\n  $bs_navbar: _react2['default'].PropTypes.bool,\n  $bs_navbar_bsClass: _react2['default'].PropTypes.string,\n  $bs_tabcontainer: _react2['default'].PropTypes.shape({\n    activeKey: _react2['default'].PropTypes.any,\n    onSelect: _react2['default'].PropTypes.func,\n    getId: _react2['default'].PropTypes.func\n  })\n};\nNav.defaultProps = {\n  justified: false,\n  pullRight: false,\n  pullLeft: false,\n  stacked: false\n};\nexports['default'] = _utilsBootstrapUtils.bsClass('nav', _utilsBootstrapUtils.bsStyles(['tabs', 'pills'], Nav));\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}