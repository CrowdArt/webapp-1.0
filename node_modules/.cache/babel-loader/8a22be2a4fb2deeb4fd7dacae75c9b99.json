{"ast":null,"code":"'use strict';\n\nvar _inherits = require('babel-runtime/helpers/inherits')['default'];\n\nvar _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];\n\nvar _extends = require('babel-runtime/helpers/extends')['default'];\n\nvar _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];\n\nexports.__esModule = true;\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _domHelpersActiveElement = require('dom-helpers/activeElement');\n\nvar _domHelpersActiveElement2 = _interopRequireDefault(_domHelpersActiveElement);\n\nvar _domHelpersQueryContains = require('dom-helpers/query/contains');\n\nvar _domHelpersQueryContains2 = _interopRequireDefault(_domHelpersQueryContains);\n\nvar _keycode = require('keycode');\n\nvar _keycode2 = _interopRequireDefault(_keycode);\n\nvar _lodashCompatCollectionFind = require('lodash-compat/collection/find');\n\nvar _lodashCompatCollectionFind2 = _interopRequireDefault(_lodashCompatCollectionFind);\n\nvar _lodashCompatObjectOmit = require('lodash-compat/object/omit');\n\nvar _lodashCompatObjectOmit2 = _interopRequireDefault(_lodashCompatObjectOmit);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactDom = require('react-dom');\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _reactPropTypesLibAll = require('react-prop-types/lib/all');\n\nvar _reactPropTypesLibAll2 = _interopRequireDefault(_reactPropTypesLibAll);\n\nvar _reactPropTypesLibElementType = require('react-prop-types/lib/elementType');\n\nvar _reactPropTypesLibElementType2 = _interopRequireDefault(_reactPropTypesLibElementType);\n\nvar _reactPropTypesLibIsRequiredForA11y = require('react-prop-types/lib/isRequiredForA11y');\n\nvar _reactPropTypesLibIsRequiredForA11y2 = _interopRequireDefault(_reactPropTypesLibIsRequiredForA11y);\n\nvar _uncontrollable = require('uncontrollable');\n\nvar _uncontrollable2 = _interopRequireDefault(_uncontrollable);\n\nvar _warning = require('warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nvar _utilsBootstrapUtils = require('./utils/bootstrapUtils');\n\nvar _utilsCreateChainedFunction = require('./utils/createChainedFunction');\n\nvar _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);\n\nvar _utilsCustomPropTypes = require('./utils/CustomPropTypes');\n\nvar _utilsCustomPropTypes2 = _interopRequireDefault(_utilsCustomPropTypes);\n\nvar _utilsValidComponentChildren = require('./utils/ValidComponentChildren');\n\nvar _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);\n\nvar _ButtonGroup = require('./ButtonGroup');\n\nvar _ButtonGroup2 = _interopRequireDefault(_ButtonGroup);\n\nvar _DropdownMenu = require('./DropdownMenu');\n\nvar _DropdownMenu2 = _interopRequireDefault(_DropdownMenu);\n\nvar _DropdownToggle = require('./DropdownToggle');\n\nvar _DropdownToggle2 = _interopRequireDefault(_DropdownToggle);\n\nvar TOGGLE_ROLE = _DropdownToggle2['default'].defaultProps.bsRole;\nvar MENU_ROLE = _DropdownMenu2['default'].defaultProps.bsRole;\n\nvar Dropdown = function (_React$Component) {\n  _inherits(Dropdown, _React$Component);\n\n  function Dropdown(props) {\n    _classCallCheck(this, Dropdown);\n\n    _React$Component.call(this, props);\n\n    this.Toggle = _DropdownToggle2['default'];\n    this.toggleOpen = this.toggleOpen.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    this.handleClose = this.handleClose.bind(this);\n    this.extractChildren = this.extractChildren.bind(this);\n    this.refineMenu = this.refineMenu.bind(this);\n    this.refineToggle = this.refineToggle.bind(this);\n    this.childExtractors = [{\n      key: 'toggle',\n      matches: function matches(child) {\n        return child.props.bsRole === TOGGLE_ROLE;\n      },\n      refine: this.refineToggle\n    }, {\n      key: 'menu',\n      exclusive: true,\n      matches: function matches(child) {\n        return child.props.bsRole === MENU_ROLE;\n      },\n      refine: this.refineMenu\n    }];\n    this.state = {};\n    this.lastOpenEventType = null;\n  }\n\n  Dropdown.prototype.componentDidMount = function componentDidMount() {\n    this.focusNextOnOpen();\n  };\n\n  Dropdown.prototype.componentWillUpdate = function componentWillUpdate(nextProps) {\n    if (!nextProps.open && this.props.open) {\n      this._focusInDropdown = _domHelpersQueryContains2['default'](_reactDom2['default'].findDOMNode(this.menu), _domHelpersActiveElement2['default'](document));\n    }\n  };\n\n  Dropdown.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {\n    if (this.props.open && !prevProps.open) {\n      this.focusNextOnOpen();\n    }\n\n    if (!this.props.open && prevProps.open) {\n      // if focus hasn't already moved from the menu lets return it\n      // to the toggle\n      if (this._focusInDropdown) {\n        this._focusInDropdown = false;\n        this.focus();\n      }\n    }\n  };\n\n  Dropdown.prototype.render = function render() {\n    var _rootClasses;\n\n    var children = this.extractChildren();\n    var Component = this.props.componentClass;\n\n    var props = _lodashCompatObjectOmit2['default'](this.props, ['id', 'bsClass', 'role', 'onSelect']);\n\n    var className = _utilsBootstrapUtils.prefix(this.props);\n\n    var rootClasses = (_rootClasses = {\n      open: this.props.open,\n      disabled: this.props.disabled\n    }, _rootClasses[className] = !this.props.dropup, _rootClasses.dropup = this.props.dropup, _rootClasses);\n    return _react2['default'].createElement(Component, _extends({}, props, {\n      className: _classnames2['default'](this.props.className, rootClasses)\n    }), children);\n  };\n\n  Dropdown.prototype.toggleOpen = function toggleOpen() {\n    var eventType = arguments.length <= 0 || arguments[0] === undefined ? null : arguments[0];\n    var open = !this.props.open;\n\n    if (open) {\n      this.lastOpenEventType = eventType;\n    }\n\n    if (this.props.onToggle) {\n      this.props.onToggle(open);\n    }\n  };\n\n  Dropdown.prototype.handleClick = function handleClick() {\n    if (this.props.disabled) {\n      return;\n    }\n\n    this.toggleOpen('click');\n  };\n\n  Dropdown.prototype.handleKeyDown = function handleKeyDown(event) {\n    if (this.props.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case _keycode2['default'].codes.down:\n        if (!this.props.open) {\n          this.toggleOpen('keydown');\n        } else if (this.menu.focusNext) {\n          this.menu.focusNext();\n        }\n\n        event.preventDefault();\n        break;\n\n      case _keycode2['default'].codes.esc:\n      case _keycode2['default'].codes.tab:\n        this.handleClose(event);\n        break;\n\n      default:\n    }\n  };\n\n  Dropdown.prototype.handleClose = function handleClose() {\n    if (!this.props.open) {\n      return;\n    }\n\n    this.toggleOpen();\n  };\n\n  Dropdown.prototype.focusNextOnOpen = function focusNextOnOpen() {\n    var menu = this.menu;\n\n    if (!menu.focusNext) {\n      return;\n    }\n\n    if (this.lastOpenEventType === 'keydown' || this.props.role === 'menuitem') {\n      menu.focusNext();\n    }\n  };\n\n  Dropdown.prototype.focus = function focus() {\n    var toggle = _reactDom2['default'].findDOMNode(this.toggle);\n\n    if (toggle && toggle.focus) {\n      toggle.focus();\n    }\n  };\n\n  Dropdown.prototype.extractChildren = function extractChildren() {\n    var _this = this;\n\n    var open = !!this.props.open;\n    var seen = {};\n    return _utilsValidComponentChildren2['default'].map(this.props.children, function (child) {\n      var extractor = _lodashCompatCollectionFind2['default'](_this.childExtractors, function (x) {\n        return x.matches(child);\n      });\n\n      if (extractor) {\n        if (seen[extractor.key]) {\n          return false;\n        }\n\n        seen[extractor.key] = extractor.exclusive;\n        child = extractor.refine(child, open);\n      }\n\n      return child;\n    });\n  };\n\n  Dropdown.prototype.refineMenu = function refineMenu(menu, open) {\n    var _this2 = this;\n\n    var ref = function ref(r) {\n      return _this2.menu = r;\n    };\n\n    if (typeof menu.ref === 'string') {\n      process.env.NODE_ENV !== 'production' ? _warning2['default'](false, 'String refs are not supported on `<Dropdown.Menu>` components. ' + 'To apply a ref to the component use the callback signature: \\n\\n ' + 'https://facebook.github.io/react/docs/more-about-refs.html#the-ref-callback-attribute') : undefined;\n    } else {\n      ref = _utilsCreateChainedFunction2['default'](menu.ref, ref);\n    }\n\n    var menuProps = {\n      ref: ref,\n      open: open,\n      labelledBy: this.props.id,\n      pullRight: this.props.pullRight,\n      bsClass: this.props.bsClass\n    };\n    menuProps.onClose = _utilsCreateChainedFunction2['default'](menu.props.onClose, this.props.onClose, this.handleClose);\n    menuProps.onSelect = _utilsCreateChainedFunction2['default'](menu.props.onSelect, this.props.onSelect, this.handleClose);\n    return _react.cloneElement(menu, menuProps, menu.props.children);\n  };\n\n  Dropdown.prototype.refineToggle = function refineToggle(toggle, open) {\n    var _this3 = this;\n\n    var ref = function ref(r) {\n      return _this3.toggle = r;\n    };\n\n    if (typeof toggle.ref === 'string') {\n      process.env.NODE_ENV !== 'production' ? _warning2['default'](false, 'String refs are not supported on `<Dropdown.Toggle>` components. ' + 'To apply a ref to the component use the callback signature: \\n\\n ' + 'https://facebook.github.io/react/docs/more-about-refs.html#the-ref-callback-attribute') : undefined;\n    } else {\n      ref = _utilsCreateChainedFunction2['default'](toggle.ref, ref);\n    }\n\n    var toggleProps = {\n      ref: ref,\n      open: open,\n      id: this.props.id,\n      role: this.props.role\n    };\n    toggleProps.onClick = _utilsCreateChainedFunction2['default'](toggle.props.onClick, this.handleClick);\n    toggleProps.onKeyDown = _utilsCreateChainedFunction2['default'](toggle.props.onKeyDown, this.handleKeyDown);\n    return _react.cloneElement(toggle, toggleProps, toggle.props.children);\n  };\n\n  return Dropdown;\n}(_react2['default'].Component);\n\nDropdown.Toggle = _DropdownToggle2['default'];\nDropdown.TOGGLE_ROLE = TOGGLE_ROLE;\nDropdown.MENU_ROLE = MENU_ROLE;\nDropdown.defaultProps = {\n  componentClass: _ButtonGroup2['default'],\n  bsClass: 'dropdown'\n};\nDropdown.propTypes = {\n  bsClass: _react2['default'].PropTypes.string,\n\n  /**\n   * The menu will open above the dropdown button, instead of below it.\n   */\n  dropup: _react2['default'].PropTypes.bool,\n\n  /**\n   * An html id attribute, necessary for assistive technologies, such as screen readers.\n   * @type {string|number}\n   * @required\n   */\n  id: _reactPropTypesLibIsRequiredForA11y2['default'](_react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.string, _react2['default'].PropTypes.number])),\n  componentClass: _reactPropTypesLibElementType2['default'],\n\n  /**\n   * The children of a Dropdown may be a `<Dropdown.Toggle/>` or a `<Dropdown.Menu/>`.\n   * @type {node}\n   */\n  children: _reactPropTypesLibAll2['default'](_utilsCustomPropTypes2['default'].requiredRoles(TOGGLE_ROLE, MENU_ROLE), _utilsCustomPropTypes2['default'].exclusiveRoles(MENU_ROLE)),\n\n  /**\n   * Whether or not component is disabled.\n   */\n  disabled: _react2['default'].PropTypes.bool,\n\n  /**\n   * Align the menu to the right side of the Dropdown toggle\n   */\n  pullRight: _react2['default'].PropTypes.bool,\n\n  /**\n   * Whether or not the Dropdown is visible.\n   *\n   * @controllable onToggle\n   */\n  open: _react2['default'].PropTypes.bool,\n\n  /**\n   * A callback fired when the Dropdown closes.\n   */\n  onClose: _react2['default'].PropTypes.func,\n\n  /**\n   * A callback fired when the Dropdown wishes to change visibility. Called with the requested\n   * `open` value.\n   *\n   * ```js\n   * function(Boolean isOpen) {}\n   * ```\n   * @controllable open\n   */\n  onToggle: _react2['default'].PropTypes.func,\n\n  /**\n   * A callback fired when a menu item is selected.\n   *\n   * ```js\n   * (eventKey: any, event: Object) => any\n   * ```\n   */\n  onSelect: _react2['default'].PropTypes.func,\n\n  /**\n   * If `'menuitem'`, causes the dropdown to behave like a menu item rather than\n   * a menu button.\n   */\n  role: _react2['default'].PropTypes.string\n};\nDropdown = _uncontrollable2['default'](Dropdown, {\n  open: 'onToggle'\n});\nDropdown.Toggle = _DropdownToggle2['default'];\nDropdown.Menu = _DropdownMenu2['default'];\nexports['default'] = Dropdown;\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}