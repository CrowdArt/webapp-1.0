{"ast":null,"code":"'use strict';\n\nvar _inherits = require('babel-runtime/helpers/inherits')['default'];\n\nvar _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];\n\nvar _extends = require('babel-runtime/helpers/extends')['default'];\n\nvar _objectWithoutProperties = require('babel-runtime/helpers/object-without-properties')['default'];\n\nvar _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];\n\nexports.__esModule = true;\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _styleMaps = require('./styleMaps');\n\nvar _utilsBootstrapUtils = require('./utils/bootstrapUtils');\n\nvar _utilsDeprecationWarning = require('./utils/deprecationWarning');\n\nvar _utilsDeprecationWarning2 = _interopRequireDefault(_utilsDeprecationWarning);\n\nvar _utilsValidComponentChildren = require('./utils/ValidComponentChildren');\n\nvar _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);\n\nvar _Interpolate = require('./Interpolate');\n\nvar _Interpolate2 = _interopRequireDefault(_Interpolate);\n/**\n * Custom propTypes checker\n */\n\n\nfunction onlyProgressBar(props, propName, componentName) {\n  if (props[propName]) {\n    var _ret = function () {\n      var error = undefined,\n          childIdentifier = undefined;\n\n      _react2['default'].Children.forEach(props[propName], function (child) {\n        if (child.type !== ProgressBar) {\n          //eslint-disable-line\n          childIdentifier = child.type.displayName ? child.type.displayName : child.type;\n          error = new Error('Children of ' + componentName + ' can contain only ProgressBar components. Found ' + childIdentifier);\n        }\n      });\n\n      return {\n        v: error\n      };\n    }();\n\n    if (typeof _ret === 'object') return _ret.v;\n  }\n}\n\nvar ProgressBar = function (_React$Component) {\n  _inherits(ProgressBar, _React$Component);\n\n  function ProgressBar() {\n    _classCallCheck(this, ProgressBar);\n\n    _React$Component.apply(this, arguments);\n  }\n\n  ProgressBar.prototype.getPercentage = function getPercentage(now, min, max) {\n    var roundPrecision = 1000;\n    return Math.round((now - min) / (max - min) * 100 * roundPrecision) / roundPrecision;\n  };\n\n  ProgressBar.prototype.render = function render() {\n    if (this.props.isChild) {\n      return this.renderProgressBar();\n    }\n\n    var content = undefined;\n\n    if (this.props.children) {\n      content = _utilsValidComponentChildren2['default'].map(this.props.children, this.renderChildBar);\n    } else {\n      content = this.renderProgressBar();\n    }\n\n    return _react2['default'].createElement('div', _extends({}, this.props, {\n      className: _classnames2['default'](this.props.className, 'progress'),\n      min: null,\n      max: null,\n      label: null,\n      'aria-valuetext': null\n    }), content);\n  };\n\n  ProgressBar.prototype.renderChildBar = function renderChildBar(child, index) {\n    return _react.cloneElement(child, {\n      isChild: true,\n      key: child.key ? child.key : index\n    });\n  };\n\n  ProgressBar.prototype.renderProgressBar = function renderProgressBar() {\n    var _classNames;\n\n    var _props = this.props;\n    var className = _props.className;\n    var label = _props.label;\n    var now = _props.now;\n    var min = _props.min;\n    var max = _props.max;\n    var style = _props.style;\n\n    var props = _objectWithoutProperties(_props, ['className', 'label', 'now', 'min', 'max', 'style']);\n\n    var percentage = this.getPercentage(now, min, max);\n\n    if (typeof label === 'string') {\n      label = this.renderLabel(percentage);\n    }\n\n    if (this.props.srOnly) {\n      label = _react2['default'].createElement('span', {\n        className: 'sr-only'\n      }, label);\n    }\n\n    var classes = _classnames2['default'](className, _utilsBootstrapUtils.getClassSet(this.props), (_classNames = {\n      active: this.props.active\n    }, _classNames[_utilsBootstrapUtils.prefix(this.props, 'striped')] = this.props.active || this.props.striped, _classNames));\n\n    return _react2['default'].createElement('div', _extends({}, props, {\n      className: classes,\n      role: 'progressbar',\n      style: _extends({\n        width: percentage + '%'\n      }, style),\n      'aria-valuenow': this.props.now,\n      'aria-valuemin': this.props.min,\n      'aria-valuemax': this.props.max\n    }), label);\n  };\n\n  ProgressBar.prototype.renderLabel = function renderLabel(percentage) {\n    var _props2 = this.props;\n    var interpolateClass = _props2.interpolateClass;\n    var now = _props2.now;\n    var min = _props2.min;\n    var max = _props2.max;\n    var bsStyle = _props2.bsStyle;\n    var label = _props2.label;\n    var InterpolateClass = interpolateClass || _Interpolate2['default'];\n    var REGEXP = InterpolateClass.REGEXP;\n\n    if (REGEXP && REGEXP.exec(label)) {\n      _utilsDeprecationWarning2['default']('String interpolation in <ProgressBar label>', 'ES2015 template strings or other patterns');\n    }\n\n    return _react2['default'].createElement(InterpolateClass, {\n      now: now,\n      min: min,\n      max: max,\n      percent: percentage,\n      bsStyle: bsStyle\n    }, label);\n  };\n\n  return ProgressBar;\n}(_react2['default'].Component);\n\nProgressBar.propTypes = {\n  min: _react.PropTypes.number,\n  now: _react.PropTypes.number,\n  max: _react.PropTypes.number,\n  label: _react.PropTypes.node,\n  srOnly: _react.PropTypes.bool,\n  striped: _react.PropTypes.bool,\n  active: _react.PropTypes.bool,\n  children: onlyProgressBar,\n  className: _react2['default'].PropTypes.string,\n  interpolateClass: _react.PropTypes.node,\n\n  /**\n   * @private\n   */\n  isChild: _react.PropTypes.bool\n};\nProgressBar.defaultProps = {\n  min: 0,\n  max: 100,\n  active: false,\n  isChild: false,\n  srOnly: false,\n  striped: false\n};\nexports['default'] = _utilsBootstrapUtils.bsStyles(_styleMaps.State.values(), _utilsBootstrapUtils.bsClass('progress-bar', ProgressBar));\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}