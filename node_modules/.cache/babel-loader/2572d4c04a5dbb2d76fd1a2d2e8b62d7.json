{"ast":null,"code":"'use strict';\n\nvar _extends = require('babel-runtime/helpers/extends')['default'];\n\nvar _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];\n\nexports.__esModule = true;\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _domHelpersClassAddClass = require('dom-helpers/class/addClass');\n\nvar _domHelpersClassAddClass2 = _interopRequireDefault(_domHelpersClassAddClass);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactPropTypesLibElementType = require('react-prop-types/lib/elementType');\n\nvar _reactPropTypesLibElementType2 = _interopRequireDefault(_reactPropTypesLibElementType);\n\nvar _warning = require('warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nvar _utilsBootstrapUtils = require('./utils/bootstrapUtils');\n\nvar _utilsCreateChainedFunction = require('./utils/createChainedFunction');\n\nvar _utilsCreateChainedFunction2 = _interopRequireDefault(_utilsCreateChainedFunction);\n\nvar _utilsTabUtils = require('./utils/tabUtils');\n\nvar _Fade = require('./Fade');\n\nvar _Fade2 = _interopRequireDefault(_Fade);\n\nvar TabPane = _react2['default'].createClass({\n  displayName: 'TabPane',\n  propTypes: {\n    /**\n     * Uniquely identify the TabPane amoung its siblings.\n     */\n    eventKey: _react.PropTypes.any,\n\n    /**\n     * Use animation when showing or hiding TabPanes. Use `false` to disable,\n     * `true` to enable the default \"Fade\" animation or any Transition component.\n     *\n     */\n    animation: _react.PropTypes.oneOfType([_react.PropTypes.bool, _reactPropTypesLibElementType2['default']]),\n\n    /** @private **/\n    id: _react.PropTypes.string,\n\n    /** @private **/\n    'aria-labelledby': _react.PropTypes.string,\n\n    /**\n     * Transition onEnter callback when animation is not `false`\n     */\n    onEnter: _react.PropTypes.func,\n\n    /**\n     * Transition onEntering callback when animation is not `false`\n     */\n    onEntering: _react.PropTypes.func,\n\n    /**\n     * Transition onEntered callback when animation is not `false`\n     */\n    onEntered: _react.PropTypes.func,\n\n    /**\n     * Transition onExit callback when animation is not `false`\n     */\n    onExit: _react.PropTypes.func,\n\n    /**\n     * Transition onExiting callback when animation is not `false`\n     */\n    onExiting: _react.PropTypes.func,\n\n    /**\n     * Transition onExited callback when animation is not `false`\n     */\n    onExited: _react.PropTypes.func,\n\n    /**\n     * Unmount the tab (remove it from the DOM) when it is no longer visible\n     */\n    unmountOnExit: _react.PropTypes.bool\n  },\n  contextTypes: {\n    $bs_tabcontainer: _react.PropTypes.shape({\n      getId: _react.PropTypes.func,\n      unmountOnExit: _react.PropTypes.bool\n    }),\n    $bs_tabcontent: _react.PropTypes.shape({\n      bsClass: _react.PropTypes.string,\n      animation: _react.PropTypes.oneOfType([_react.PropTypes.bool, _reactPropTypesLibElementType2['default']]),\n      activeKey: _react.PropTypes.any,\n      onExited: _react.PropTypes.func,\n      register: _react.PropTypes.func,\n      unmountOnExit: _react.PropTypes.bool\n    })\n  },\n\n  /**\n   * We override the TabContainer context so Navs in TabPanes\n   * don't conflict with the top level one.\n   */\n  childContextTypes: {\n    $bs_tabcontainer: _react.PropTypes.oneOf([null])\n  },\n  componentWillMount: function componentWillMount() {\n    this.exited = !this.isActive();\n    this.registerWithParent();\n  },\n  componentWillReceiveProps: function componentWillReceiveProps(nextProps, nextContext) {\n    if (nextProps.eventKey !== this.props.eventKey) {\n      this.unregisterWithParent();\n      this.registerWithParent(nextProps, nextContext);\n    }\n  },\n  componentWillUpdate: function componentWillUpdate(nextProps, _, nextContext) {\n    if (this.isActive(nextProps, nextContext)) {\n      this.exited = false;\n    } else if (!this.exited && !this.getTransition(nextProps, nextContext)) {\n      // Otherwise let handleHidden take care of marking exited.\n      this.exited = true;\n      this._fireExitedCallback = true;\n    }\n  },\n  componentDidUpdate: function componentDidUpdate() {\n    if (this._fireExitedCallback) {\n      this._fireExitedCallback = false;\n      this.onExited();\n    }\n  },\n  componentWillUnmount: function componentWillUnmount() {\n    this.unregisterWithParent();\n  },\n  getChildContext: function getChildContext() {\n    return {\n      $bs_tabcontainer: null\n    };\n  },\n  getTransition: function getTransition() {\n    var props = arguments.length <= 0 || arguments[0] === undefined ? this.props : arguments[0];\n    var context = arguments.length <= 1 || arguments[1] === undefined ? this.context : arguments[1];\n    context = this.getContext('$bs_tabcontent', context);\n    return props.animation != null ? props.animation : context.animation;\n  },\n  getUnmountOnExit: function getUnmountOnExit() {\n    var context = this.getContext('$bs_tabcontent', this.context);\n    return this.props.unmountOnExit != null ? this.props.unmountOnExit : context.unmountOnExit;\n  },\n  isActive: function isActive() {\n    var props = arguments.length <= 0 || arguments[0] === undefined ? this.props : arguments[0];\n    var context = arguments.length <= 1 || arguments[1] === undefined ? this.context : arguments[1];\n    return this.getContext('$bs_tabcontent', context).activeKey === props.eventKey;\n  },\n  render: function render() {\n    var _classes;\n\n    var active = this.isActive();\n    var visible = active || !this.exited;\n    var getId = this.getContext('$bs_tabcontainer').getId;\n    var bsClass = this.props.bsClass || this.getContext('$bs_tabcontent').bsClass;\n    var Transition = this.getTransition();\n\n    if (!visible && !Transition && this.getUnmountOnExit()) {\n      return null;\n    }\n\n    var classes = (_classes = {\n      active: visible\n    }, _classes[_utilsBootstrapUtils.prefix({\n      bsClass: bsClass\n    }, 'pane')] = true, _classes);\n    var _props = this.props;\n    var eventKey = _props.eventKey;\n    var id = _props.id;\n    var labelledBy = _props['aria-labelledby'];\n    var onExit = _props.onExit;\n    var onExiting = _props.onExiting;\n    var onExited = _props.onExited;\n    var onEnter = _props.onEnter;\n    var onEntering = _props.onEntering;\n    var onEntered = _props.onEntered;\n\n    if (typeof Transition === 'boolean') {\n      Transition = Transition ? _Fade2['default'] : null;\n    }\n\n    if (getId) {\n      process.env.NODE_ENV !== 'production' ? _warning2['default'](!(id || labelledBy), 'In the context of a TabContainer, TabPanes are given generated `id` and `aria-labelledby` ' + 'attributes for the sake of proper component accessibility. Any provided ones will be ignored. ' + 'To control these attributes directly provide a `generateChildId` prop to the parent TabContainer.') : undefined;\n      id = getId(eventKey, _utilsTabUtils.PANE) || null;\n      labelledBy = getId(eventKey, _utilsTabUtils.TAB) || null;\n    }\n\n    var tabPane = _react2['default'].createElement('div', _extends({}, this.props, {\n      id: id,\n      role: 'tabpanel',\n      'aria-hidden': !visible,\n      'aria-labelledby': labelledBy,\n      className: _classnames2['default'](this.props.className, classes, {\n        'in': !Transition\n      })\n    }), this.props.children);\n\n    if (Transition) {\n      tabPane = _react2['default'].createElement(Transition, {\n        'in': active,\n        onExit: onExit,\n        onExiting: onExiting,\n        onExited: _utilsCreateChainedFunction2['default'](this.handleExited, onExited),\n        onEnter: _utilsCreateChainedFunction2['default'](this.handleEnter, onEnter),\n        onEntering: onEntering,\n        onEntered: onEntered,\n        unmountOnExit: this.getUnmountOnExit()\n      }, tabPane);\n    }\n\n    return tabPane;\n  },\n  onExited: function onExited() {\n    var context = this.getContext('$bs_tabcontent');\n\n    if (context.onExited) {\n      context.onExited(this.props.eventKey);\n    }\n  },\n  handleEnter: function handleEnter(node) {\n    // ref: https://github.com/react-bootstrap/react-overlays/issues/40\n    if (this.isActive()) {\n      _domHelpersClassAddClass2['default'](node, 'active');\n\n      node.offsetWidth; // eslint-disable-line no-unused-expressions\n    }\n  },\n  handleExited: function handleExited() {\n    this.exited = true;\n    this.onExited();\n    this.forceUpdate();\n  },\n  registerWithParent: function registerWithParent() {\n    var props = arguments.length <= 0 || arguments[0] === undefined ? this.props : arguments[0];\n    var context = arguments.length <= 1 || arguments[1] === undefined ? this.context : arguments[1];\n    var register = this.getContext('$bs_tabcontent', context).register;\n\n    if (register) {\n      this.unregister = register(props.eventKey);\n    }\n  },\n  unregisterWithParent: function unregisterWithParent() {\n    if (this.unregister) {\n      this.unregister();\n    }\n  },\n  getContext: function getContext(key) {\n    var context = arguments.length <= 1 || arguments[1] === undefined ? this.context : arguments[1];\n    return context[key] || {};\n  }\n});\n\nexports['default'] = _utilsBootstrapUtils.bsClass('tab', TabPane);\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}