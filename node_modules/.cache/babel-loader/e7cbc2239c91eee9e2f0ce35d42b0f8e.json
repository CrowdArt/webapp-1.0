{"ast":null,"code":"'use strict';\n\nvar _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];\n\nexports.__esModule = true;\n\nvar _reactPropTypesLibCommon = require('react-prop-types/lib/common');\n\nvar _childrenToArray = require('./childrenToArray');\n\nvar _childrenToArray2 = _interopRequireDefault(_childrenToArray);\n\nexports['default'] = {\n  requiredRoles: function requiredRoles() {\n    for (var _len = arguments.length, roles = Array(_len), _key = 0; _key < _len; _key++) {\n      roles[_key] = arguments[_key];\n    }\n\n    return _reactPropTypesLibCommon.createChainableTypeChecker(function requiredRolesValidator(props, propName, component) {\n      var missing = undefined;\n\n      var children = _childrenToArray2['default'](props.children);\n\n      var inRole = function inRole(role, child) {\n        return role === child.props.bsRole;\n      };\n\n      roles.every(function (role) {\n        if (!children.some(function (child) {\n          return inRole(role, child);\n        })) {\n          missing = role;\n          return false;\n        }\n\n        return true;\n      });\n\n      if (missing) {\n        return new Error('(children) ' + component + ' - Missing a required child with bsRole: ' + missing + '. ' + (component + ' must have at least one child of each of the following bsRoles: ' + roles.join(', ')));\n      }\n    });\n  },\n  exclusiveRoles: function exclusiveRoles() {\n    for (var _len2 = arguments.length, roles = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      roles[_key2] = arguments[_key2];\n    }\n\n    return _reactPropTypesLibCommon.createChainableTypeChecker(function exclusiveRolesValidator(props, propName, component) {\n      var children = _childrenToArray2['default'](props.children);\n\n      var duplicate = undefined;\n      roles.every(function (role) {\n        var childrenWithRole = children.filter(function (child) {\n          return child.props.bsRole === role;\n        });\n\n        if (childrenWithRole.length > 1) {\n          duplicate = role;\n          return false;\n        }\n\n        return true;\n      });\n\n      if (duplicate) {\n        return new Error('(children) ' + component + ' - Duplicate children detected of bsRole: ' + duplicate + '. ' + ('Only one child each allowed with the following bsRoles: ' + roles.join(', ')));\n      }\n    });\n  }\n};\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}