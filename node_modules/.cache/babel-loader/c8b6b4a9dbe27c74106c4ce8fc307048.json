{"ast":null,"code":"'use strict';\n\nvar _extends = require('babel-runtime/helpers/extends')['default'];\n\nvar _Object$assign = require('babel-runtime/core-js/object/assign')['default'];\n\nvar _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];\n\nexports.__esModule = true;\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _utilsBootstrapUtils = require('./utils/bootstrapUtils');\n\nvar _utilsValidComponentChildren = require('./utils/ValidComponentChildren');\n\nvar _utilsValidComponentChildren2 = _interopRequireDefault(_utilsValidComponentChildren);\n\nvar _CarouselCaption = require('./CarouselCaption');\n\nvar _CarouselCaption2 = _interopRequireDefault(_CarouselCaption);\n\nvar _CarouselItem = require('./CarouselItem');\n\nvar _CarouselItem2 = _interopRequireDefault(_CarouselItem);\n\nvar _Glyphicon = require('./Glyphicon');\n\nvar _Glyphicon2 = _interopRequireDefault(_Glyphicon);\n\nvar Carousel = _react2['default'].createClass({\n  displayName: 'Carousel',\n  propTypes: {\n    slide: _react2['default'].PropTypes.bool,\n    indicators: _react2['default'].PropTypes.bool,\n    interval: _react2['default'].PropTypes.number,\n    controls: _react2['default'].PropTypes.bool,\n    pauseOnHover: _react2['default'].PropTypes.bool,\n    wrap: _react2['default'].PropTypes.bool,\n\n    /**\n     * Callback fired when the active item changes.\n     *\n     * ```js\n     * (eventKey: any) => any | (eventKey: any, event: Object) => any\n     * ```\n     *\n     * If this callback takes two or more arguments, the second argument will\n     * be a persisted event object with `direction` set to the direction of the\n     * transition.\n     */\n    onSelect: _react2['default'].PropTypes.func,\n    onSlideEnd: _react2['default'].PropTypes.func,\n    activeIndex: _react2['default'].PropTypes.number,\n    defaultActiveIndex: _react2['default'].PropTypes.number,\n    direction: _react2['default'].PropTypes.oneOf(['prev', 'next']),\n    prevIcon: _react2['default'].PropTypes.node,\n    nextIcon: _react2['default'].PropTypes.node\n  },\n  getDefaultProps: function getDefaultProps() {\n    return {\n      bsClass: 'carousel',\n      slide: true,\n      interval: 5000,\n      pauseOnHover: true,\n      wrap: true,\n      indicators: true,\n      controls: true,\n      prevIcon: _react2['default'].createElement(_Glyphicon2['default'], {\n        glyph: 'chevron-left'\n      }),\n      nextIcon: _react2['default'].createElement(_Glyphicon2['default'], {\n        glyph: 'chevron-right'\n      })\n    };\n  },\n  getInitialState: function getInitialState() {\n    return {\n      activeIndex: this.props.defaultActiveIndex == null ? 0 : this.props.defaultActiveIndex,\n      previousActiveIndex: null,\n      direction: null\n    };\n  },\n  getDirection: function getDirection(prevIndex, index) {\n    if (prevIndex === index) {\n      return null;\n    }\n\n    return prevIndex > index ? 'prev' : 'next';\n  },\n  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {\n    var activeIndex = this.getActiveIndex();\n\n    if (nextProps.activeIndex != null && nextProps.activeIndex !== activeIndex) {\n      clearTimeout(this.timeout);\n      this.setState({\n        previousActiveIndex: activeIndex,\n        direction: nextProps.direction != null ? nextProps.direction : this.getDirection(activeIndex, nextProps.activeIndex)\n      });\n    }\n  },\n  componentDidMount: function componentDidMount() {\n    this.waitForNext();\n  },\n  componentWillUnmount: function componentWillUnmount() {\n    clearTimeout(this.timeout);\n  },\n  next: function next(e) {\n    if (e) {\n      e.preventDefault();\n    }\n\n    var index = this.getActiveIndex() + 1;\n\n    var count = _utilsValidComponentChildren2['default'].count(this.props.children);\n\n    if (index > count - 1) {\n      if (!this.props.wrap) {\n        return;\n      }\n\n      index = 0;\n    }\n\n    this.handleSelect(index, e, 'next');\n  },\n  prev: function prev(e) {\n    if (e) {\n      e.preventDefault();\n    }\n\n    var index = this.getActiveIndex() - 1;\n\n    if (index < 0) {\n      if (!this.props.wrap) {\n        return;\n      }\n\n      index = _utilsValidComponentChildren2['default'].count(this.props.children) - 1;\n    }\n\n    this.handleSelect(index, e, 'prev');\n  },\n  pause: function pause() {\n    this.isPaused = true;\n    clearTimeout(this.timeout);\n  },\n  play: function play() {\n    this.isPaused = false;\n    this.waitForNext();\n  },\n  waitForNext: function waitForNext() {\n    if (!this.isPaused && this.props.slide && this.props.interval && this.props.activeIndex == null) {\n      this.timeout = setTimeout(this.next, this.props.interval);\n    }\n  },\n  handleMouseOver: function handleMouseOver() {\n    if (this.props.pauseOnHover) {\n      this.pause();\n    }\n  },\n  handleMouseOut: function handleMouseOut() {\n    if (this.isPaused) {\n      this.play();\n    }\n  },\n  render: function render() {\n    var _classes;\n\n    var classes = (_classes = {}, _classes[_utilsBootstrapUtils.prefix(this.props)] = true, _classes.slide = this.props.slide, _classes);\n    return _react2['default'].createElement('div', _extends({}, this.props, {\n      className: _classnames2['default'](this.props.className, classes),\n      onMouseOver: this.handleMouseOver,\n      onMouseOut: this.handleMouseOut\n    }), this.props.indicators ? this.renderIndicators() : null, _react2['default'].createElement('div', {\n      ref: 'inner',\n      className: _utilsBootstrapUtils.prefix(this.props, 'inner')\n    }, _utilsValidComponentChildren2['default'].map(this.props.children, this.renderItem)), this.props.controls ? this.renderControls() : null);\n  },\n  renderPrev: function renderPrev() {\n    var classes = 'left ' + _utilsBootstrapUtils.prefix(this.props, 'control');\n\n    return _react2['default'].createElement('a', {\n      className: classes,\n      href: '#prev',\n      key: 0,\n      onClick: this.prev\n    }, this.props.prevIcon);\n  },\n  renderNext: function renderNext() {\n    var classes = 'right ' + _utilsBootstrapUtils.prefix(this.props, 'control');\n\n    return _react2['default'].createElement('a', {\n      className: classes,\n      href: '#next',\n      key: 1,\n      onClick: this.next\n    }, this.props.nextIcon);\n  },\n  renderControls: function renderControls() {\n    if (!this.props.wrap) {\n      var activeIndex = this.getActiveIndex();\n\n      var count = _utilsValidComponentChildren2['default'].count(this.props.children);\n\n      return [activeIndex !== 0 ? this.renderPrev() : null, activeIndex !== count - 1 ? this.renderNext() : null];\n    }\n\n    return [this.renderPrev(), this.renderNext()];\n  },\n  renderIndicator: function renderIndicator(child, index) {\n    var _this = this;\n\n    var className = index === this.getActiveIndex() ? 'active' : null;\n    return _react2['default'].createElement('li', {\n      key: index,\n      className: className,\n      onClick: function (e) {\n        return _this.handleSelect(index, e, null);\n      }\n    });\n  },\n  renderIndicators: function renderIndicators() {\n    var _this2 = this;\n\n    var indicators = [];\n\n    _utilsValidComponentChildren2['default'].forEach(this.props.children, function (child, index) {\n      indicators.push(_this2.renderIndicator(child, index), // Force whitespace between indicator elements, bootstrap\n      // requires this for correct spacing of elements.\n      ' ');\n    }, this);\n\n    return _react2['default'].createElement('ol', {\n      className: _utilsBootstrapUtils.prefix(this.props, 'indicators')\n    }, indicators);\n  },\n  getActiveIndex: function getActiveIndex() {\n    return this.props.activeIndex != null ? this.props.activeIndex : this.state.activeIndex;\n  },\n  handleItemAnimateOutEnd: function handleItemAnimateOutEnd() {\n    var _this3 = this;\n\n    this.setState({\n      previousActiveIndex: null,\n      direction: null\n    }, function () {\n      _this3.waitForNext();\n\n      if (_this3.props.onSlideEnd) {\n        _this3.props.onSlideEnd();\n      }\n    });\n  },\n  renderItem: function renderItem(child, index) {\n    var activeIndex = this.getActiveIndex();\n    var isActive = index === activeIndex;\n    var isPreviousActive = this.state.previousActiveIndex != null && this.state.previousActiveIndex === index && this.props.slide;\n    return _react.cloneElement(child, {\n      active: isActive,\n      ref: child.ref,\n      key: child.key ? child.key : index,\n      index: index,\n      animateOut: isPreviousActive,\n      animateIn: isActive && this.state.previousActiveIndex != null && this.props.slide,\n      direction: this.state.direction,\n      onAnimateOutEnd: isPreviousActive ? this.handleItemAnimateOutEnd : null\n    });\n  },\n  handleSelect: function handleSelect(index, e, direction) {\n    clearTimeout(this.timeout);\n\n    if (this.isMounted()) {\n      var previousActiveIndex = this.getActiveIndex();\n      direction = direction || this.getDirection(previousActiveIndex, index);\n      var onSelect = this.props.onSelect;\n\n      if (onSelect) {\n        if (onSelect.length > 1) {\n          // React SyntheticEvents are pooled, so we need to remove this event\n          // from the pool to add a custom property. To avoid unnecessarily\n          // removing objects from the pool, only do this when the listener\n          // actually wants the event.\n          e.persist();\n          e.direction = direction;\n          onSelect(index, e);\n        } else {\n          onSelect(index);\n        }\n      }\n\n      if (this.props.activeIndex == null && index !== previousActiveIndex) {\n        if (this.state.previousActiveIndex != null) {\n          // If currently animating don't activate the new index.\n          // TODO: look into queuing this canceled call and\n          // animating after the current animation has ended.\n          return;\n        }\n\n        this.setState({\n          activeIndex: index,\n          previousActiveIndex: previousActiveIndex,\n          direction: direction\n        });\n      }\n    }\n  }\n});\n\nCarousel = _Object$assign(Carousel, {\n  Caption: _CarouselCaption2['default'],\n  Item: _CarouselItem2['default']\n});\nexports['default'] = Carousel;\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}